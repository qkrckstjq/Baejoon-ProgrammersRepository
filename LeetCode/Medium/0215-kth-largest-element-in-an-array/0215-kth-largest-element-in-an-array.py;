# class Solution:
#     def findKthLargest(self, nums: List[int], k: int) -> int:
#         list.sort(nums, reverse=True)
#         return nums[k - 1]

from collections import deque
class maxPQ(object):
    @staticmethod
    def getParentIndex(index):
        return index // 2

    @staticmethod
    def getLeftChildIndex(index):
        return index * 2

    @staticmethod
    def getRightChildIndex(index):
        return (index * 2) + 1

    def __init__(self):
        self.queue = deque()
        self.queue.append([])

    def add(self, value):
        self.queue.append(value)
        self.sorting(len(self.queue) - 1)

    def sorting(self, index):
        curIndex = index
        parentIndex = maxPQ.getParentIndex(index)
        while curIndex != 1 and self.queue[curIndex] > self.queue[parentIndex]:
            self.swap(curIndex, parentIndex)
            curIndex = parentIndex
            parentIndex = maxPQ.getParentIndex(parentIndex)
    def pop(self):
        popped = self.queue[1]
        self.queue[1] = self.queue[-1]
        self.queue.pop()
        self.whenPop(1)
        return popped

    def whenPop(self, index):
        curIndex = index
        leftChildIndex = maxPQ.getLeftChildIndex(index)
        rightChildIndex = maxPQ.getRightChildIndex(index)

        while leftChildIndex < len(self.queue):
            maxChildIndex = leftChildIndex

            if rightChildIndex < len(self.queue) and self.queue[rightChildIndex] > self.queue[leftChildIndex]:
                maxChildIndex = rightChildIndex

            if self.queue[curIndex] >= self.queue[maxChildIndex]:
                break

            self.swap(curIndex, maxChildIndex)
            curIndex = maxChildIndex
            leftChildIndex = maxPQ.getLeftChildIndex(curIndex)
            rightChildIndex = maxPQ.getRightChildIndex(curIndex)

    def swap(self, i, j):
        temp = self.queue[i]
        self.queue[i] = self.queue[j]
        self.queue[j] = temp


class Solution:
    def findKthLargest(self, nums, k):
        maxHeap = maxPQ()
        for number in nums:
            maxHeap.add(number)

        result = 0
        for i in range(k):
            result = maxHeap.pop()

        return result

test = Solution()
print(test.findKthLargest([7,6,5,4,3,2,1],5))